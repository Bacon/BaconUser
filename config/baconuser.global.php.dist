<?php
return array(
    'bacon_user' => array(
        // User settings
        'user' => array(
            // Enable or disable the username field for users
            'enable_username' => true,

            // Enable or disable the user state
            'enable_user_state' => true,

            // Default user state (the state must be in allowed_login_states array)
            'default_user_state' => 1,

            // The allowed login states
            'allowed_login_states' => array(null, 1)
        ),

        // Password settings
        'password' => array(
            // This is a Zend\ServiceManager compatible configuration containing
            // the various password hashing handlers. Add your own handler here
            // if your password hashing technique differs from the provided
            // ones.
            'handler_manager' => array(
                'invokables' => array(
                    'my-hash-method' => 'My\Hash\Method',
                ),
            ),

            // Configuration for the aggregate handler. Aggregate handler is the
            // default password handler that decides which password hashing
            // technique to use based on the handler manager.
            'handler_aggregate' => array(
                // Sorted list of password hashing techniques to use to check
                // stored hashes.
                'hashing_methods' => array(
                    'my-hash-method',
                ),

                // Default hash method to use.
                'default_hashing_method' => 'my-hash-method',

                // Whether to migrate other hashes to default hashing method.
                'migrate_to_default_hashing_method' => true,
            ),

            // Bcrypt hashing method settings. These settings are for the
            // provided BcryptFactory.
            'bcrypt' => array(
                // Cost factor. Higher value means slower hashing.
                'cost' => 14,
            ),
        ),

        // Reset password settings
        'password_reset' => array(
            // The time interval for which a token is valid (for security reasons, do not
            // set a very high interval)
            'token_validity_interval' => '+24 hours'
        )
    ),
);
